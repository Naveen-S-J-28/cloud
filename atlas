const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors')
const app = express();

app.use(express.json());
app.use(cors());


mongoose.connect('mongodb+srv://naveensj:naveen@cluster0.ijnhmrd.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log("Connected to MongoDB Atlas"))
.catch(err => console.error(" MongoDB connection error:", err));

const Book = mongoose.model('Book', new mongoose.Schema({
    title: String
}));


const initialBooks = [
    { title: "Harry Potter" },
    { title: "The Hobbit" },
    { title: "Ponniyin Selvan" }
];


async function initializeData() {
    const count = await Book.countDocuments();
    if (count === 0) {
        await Book.insertMany(initialBooks);
        console.log(" Initial data added to MongoDB Atlas");
    } else {
        console.log(" Data already exists in MongoDB Atlas");
    }
}


mongoose.connection.once('open', initializeData);


app.get('/books', async (req, res) => {
    const books = await Book.find();
    res.json(books);
});


app.post('/books', async (req, res) => {
    await Book.create({ title: req.body.title });
    res.send(' Book added to MongoDB Atlas');
});

app.put('/books/:id', async (req, res) => {
    await Book.findByIdAndUpdate(req.params.id, { title: req.body.title });
    res.send(' Book updated in MongoDB Atlas');
});

app.delete('/books/:id', async (req, res) => {
    await Book.findByIdAndDelete(req.params.id);
    res.send(' Book deleted from MongoDB Atlas');
});


app.listen(3000, () => {
    console.log(' Server running at http://localhost:3000/books');
});
